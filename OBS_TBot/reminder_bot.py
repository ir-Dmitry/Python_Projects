import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.types import ParseMode
from aiogram.utils import executor
import asyncio
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo  # —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å Python 3.9+
import os
from dotenv import load_dotenv

load_dotenv()
moscow_time = datetime.now(ZoneInfo("Europe/Moscow"))
print(f"–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: {moscow_time}")


TOKEN = BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)

# bot = Bot(
#     token=TOKEN,
#     default=DefaultBotProperties(parse_mode=ParseMode.HTML)
# )


# dp = Dispatcher()


@dp.message_handler()
async def reminder_handler(message: types.Message):
    text = message.text.strip().lower()
    print(f"[{datetime.now()}] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

    if text.startswith("—á–µ—Ä–µ–∑"):
        try:
            parts = text.split(" ", 2)
            minutes = int(parts[1])
            reminder_text = parts[2]

            print(
                f"[{datetime.now()}] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç: {reminder_text}"
            )
            await message.answer(
                f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω: <b>{reminder_text}</b>"
            )
            asyncio.create_task(
                set_reminder(message.from_user.id, minutes, reminder_text)
            )  # <--- *60 –≤–µ—Ä–Ω—É–ª
        except Exception as e:
            print(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ '—á–µ—Ä–µ–∑': {e}")

    else:
        try:
            parts = text.split(" ", 3)
            date_part = parts[0]
            time_part = parts[1]
            reminder_text = parts[3]

            reminder_dt = datetime.strptime(
                f"{date_part} {time_part}", "%d.%m.%Y %H:%M"
            )
            now = datetime.now()
            delay = (reminder_dt - now).total_seconds()

            if delay <= 0:
                print(f"[{datetime.now()}] –í–≤–µ–¥–µ–Ω–æ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è: {reminder_dt}")
                await message.answer("‚ùó –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ!")
                return

            print(
                f"[{datetime.now()}] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {reminder_dt}: {reminder_text}"
            )
            await message.answer(
                f"üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ {reminder_dt.strftime('%d.%m.%Y %H:%M')}: <b>{reminder_text}</b>"
            )
            asyncio.create_task(
                set_reminder(message.from_user.id, delay, reminder_text)
            )
        except Exception as e:
            print(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã: {e}")
            now_moscow = datetime.now(ZoneInfo("Europe/Moscow")) + timedelta(minutes=1)

            formatted = now_moscow.strftime("%d.%m.%Y %H:%M")
            await message.answer(
                f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. \n–ü—Ä–∏–º–µ—Ä: \n<code>{formatted} –Ω–∞–ø–æ–º–Ω–∏ —á—Ç–æ-—Ç–æ</code> \n<code>—á–µ—Ä–µ–∑ 10 –Ω–∞–ø–æ–º–Ω–∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É</code>"
            )


async def set_reminder(user_id, delay, text):
    print(f"[{datetime.now()}] –ñ–¥—ë–º {delay} —Å–µ–∫—É–Ω–¥ –¥–ª—è —á–∞—Ç–∞ {user_id} ‚Äî {text}")
    await asyncio.sleep(delay)
    print(f"[{datetime.now()}] –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ –¥–ª—è —á–∞—Ç–∞ {user_id}: {text}")
    await bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞—é: <b>{text}</b>")


async def start_bot():
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(start_bot())
