# handlers/reminder.py
import os
import json
import asyncio
from aiogram import Bot
from datetime import datetime, timedelta
from aiogram.utils.exceptions import BotBlocked, ChatNotFound, UserDeactivated
from .file_reader import (
    save_jsons,
    load_jsons,
    get_webinar_time,
    get_timezone,
    get_webinar_link,
)

active_tasks = {}


def calculate_reminder_time(webinar_time: datetime, relative_time: str) -> datetime:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –≤–µ–±–∏–Ω–∞—Ä–∞ –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    """
    time_map = {
        "days": timedelta(days=1),
        "hours": timedelta(hours=1),
        "minutes": timedelta(minutes=1),
        "seconds": timedelta(seconds=1),
    }

    amount, unit = relative_time.split()
    amount = int(amount)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è timedelta –∏ –≤—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    return webinar_time - time_map[unit] * amount


async def update_user_block_status(bot: Bot):
    """
    –û–¥–∏–Ω —Ä–∞–∑ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å is_blocked –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    users = load_jsons("data/users.json")
    if not users:
        print("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")
        return

    updated_count = 0
    for user in users:
        user_id = user.get("user_id")
        if not user_id:
            continue

        try:
            await bot.send_chat_action(user_id, "choose_sticker")
            user["is_blocked"] = False
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω: {user_id}")
        except (BotBlocked, ChatNotFound, UserDeactivated) as e:
            user["is_blocked"] = True
            print(f"‚ùå –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {user_id} | {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è Some –æ—à–∏–±–∫–∞ {user_id}: {type(e).__name__}: {e}")
            continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É

        updated_count += 1
        await asyncio.sleep(0.05)  # –ê–Ω—Ç–∏-–ª–∏–º–∏—Ç –æ—Ç Telegram

    save_jsons("data/users.json", users)
    print(f"üìä –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


async def send_reminder_to_users(bot: Bot, text: str, include_link: bool = False):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞).
    """
    users = load_jsons("data/users.json")
    if not users:
        print("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return 0

    sent_count = 0
    full_text = text + (get_webinar_link() if include_link else "")

    for user in users:
        user_id = user.get("user_id")
        if not user_id or user.get("is_blocked", False):
            continue

        try:
            await bot.send_message(chat_id=user_id, text=full_text, parse_mode="HTML")
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_id}")
            sent_count += 1
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")
        await asyncio.sleep(0.05)  # –∞–Ω—Ç–∏-—Å–ø–∞–º

    return sent_count


async def schedule_webinar_reminder(bot: Bot):
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ –≤–µ–±–∏–Ω–∞—Ä–∞.
    –ü–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–æ–π –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
    """
    webinar_time = get_webinar_time()
    reminders = load_jsons("data/reminders.json")

    if not reminders:
        print("üì≠ –ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    now = datetime.now(get_timezone())

    for reminder in reminders:
        delay = (
            calculate_reminder_time(webinar_time, reminder["time"]) - now
        ).total_seconds()

        if delay <= 0:
            print(f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ: '{reminder['label']}' (—É—Å—Ç–∞—Ä–µ–ª–æ)")
            continue

        print(f"‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{reminder['label']}' —á–µ—Ä–µ–∑ {delay:.0f} —Å–µ–∫")
        await asyncio.sleep(delay)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å ‚Äî –∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞
        await update_user_block_status(bot)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —É—á—ë—Ç–æ–º —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        sent = await send_reminder_to_users(
            bot=bot, text=reminder["text"], include_link=bool(reminder.get("last"))
        )

        print(f"üì¨ '{reminder['label']}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        now = datetime.now(get_timezone())


# async def schedule_webinar_reminder(bot: Bot):
#     """
#     –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ –≤–µ–±–∏–Ω–∞—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON.
#     """
#     webinar_time = get_webinar_time()
#     now = datetime.now(get_timezone())
#     reminders = load_jsons("data/reminders.json")  # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ JSON —Ñ–∞–π–ª–∞

#     for reminder in reminders:
#         reminder_time = calculate_reminder_time(webinar_time, reminder["time"])
#         delay = (reminder_time - now).total_seconds()

#         if delay > 0:

#             msg = f"‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder['label']} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {reminder_time} (—á–µ—Ä–µ–∑ {delay:.0f} —Å–µ–∫)"
#             print(msg)

#             await asyncio.sleep(delay)  # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

#             users = load_jsons("data/users.json")
#             if users is None:
#                 print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
#                 continue

#             user_ids = [user["user_id"] for user in users if "user_id" in user]

#             if not user_ids:
#                 print("üì≠ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
#                 continue

#             print(
#                 f"üì® –†–∞—Å—Å—ã–ª–∫–∞ {reminder['label']} –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
#             )

#             # /////////////////////////////////////////////////////////////
#             async def check_user_activity(bot, user_id):
#                 """
#                 –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞.
#                 –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç False, –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.
#                 """
#                 try:
#                     # –°–∞–º–æ–µ –Ω–µ–∑–∞–º–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
#                     await bot.send_chat_action(user_id, "choose_sticker")
#                     return False  # –ù–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
#                 except BotBlocked:
#                     return True  # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
#                 except (ChatNotFound, UserDeactivated):
#                     return True  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω –∏–ª–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞
#                 except Exception as e:
#                     print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {user_id}: {e}")
#                     return True  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

#             # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É
#             for user in users:
#                 user_id = user.get("user_id")
#                 if not user_id:
#                     continue

#                 print(f"–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}...")

#                 is_blocked = await check_user_activity(bot, user_id)

#                 # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
#                 user["is_blocked"] = is_blocked

#                 if is_blocked:
#                     print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞!")
#                 else:
#                     print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–∫—Ç–∏–≤–µ–Ω.")

#                 # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
#             save_jsons("data/users.json", users)
#             print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç–∞—Ç—É—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
#             # /////////////////////////////////////////////////////////////

#             if reminder["last"] == True:
#                 print("–°—Å—ã–ª–∫–∞: ", get_webinar_link())
#             else:
#                 print("–ü—É—Å—Ç–æ")

#             for user_id in user_ids:
#                 try:
#                     await bot.send_message(
#                         chat_id=user_id,
#                         text=(
#                             reminder["text"] + get_webinar_link()
#                             if reminder["last"] == True
#                             else ""
#                         ),
#                         parse_mode="HTML",
#                     )
#                     print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_id}")
#                 except Exception as e:
#                     print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {user_id}: {e}")
#                 await asyncio.sleep(0.05)  # –∞–Ω—Ç–∏-—Å–ø–∞–º

#             # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ —Å–Ω–∞
#             now = datetime.now(get_timezone())
#             print(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{reminder['label']}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
#         else:
#             print(
#                 f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{reminder['label']}' –ø—Ä–æ–ø—É—â–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ."
#             )


# async def start_reminder(bot):
#     if "webinar_reminder" in active_tasks:
#         print("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ.")
#         return
#     task = asyncio.create_task(schedule_webinar_reminder(bot))
#     active_tasks["webinar_reminder"] = task

#     print("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ.")


# async def stop_reminder():
#     task = active_tasks.get("webinar_reminder")
#     if task:
#         task.cancel()
#         try:
#             await task
#         except asyncio.CancelledError:
#             print("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
#         del active_tasks["webinar_reminder"]


async def start_reminder(bot):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞."""
    if "webinar_reminder" in active_tasks:
        print("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ.")
        return

    task = asyncio.create_task(schedule_webinar_reminder(bot))
    active_tasks["webinar_reminder"] = task
    print("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ.")


async def stop_reminder():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    task = active_tasks.pop("webinar_reminder", None)
    if task:
        task.cancel()
        try:
            await task  # –î–æ–∂–∏–¥–∞–µ–º—Å—è –æ—Ç–º–µ–Ω—ã, —á—Ç–æ–±—ã –ø–æ–¥–∞–≤–∏—Ç—å CancelledError
        except asyncio.CancelledError:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º ‚Äî —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ
        print("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


async def on_startup_reg(dp):
    """–§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    bot = dp.bot
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ...")
    await start_reminder(bot)
