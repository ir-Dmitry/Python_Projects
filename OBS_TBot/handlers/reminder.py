# handlers/reminder.py
import asyncio
from aiogram import Bot
from datetime import datetime, timedelta
from .file_reader import load_jsons
from .file_reader import load_jsons, get_webinar_time, get_timezone, get_webinar_link

active_tasks = {}


def calculate_reminder_time(webinar_time: datetime, relative_time: str) -> datetime:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –≤–µ–±–∏–Ω–∞—Ä–∞ –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    """
    time_map = {
        "days": timedelta(days=1),
        "hours": timedelta(hours=1),
        "minutes": timedelta(minutes=1),
        "seconds": timedelta(seconds=1),
    }

    amount, unit = relative_time.split()
    amount = int(amount)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è timedelta –∏ –≤—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    return webinar_time - time_map[unit] * amount


async def schedule_webinar_reminder(bot: Bot):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ –≤–µ–±–∏–Ω–∞—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON.
    """
    webinar_time = get_webinar_time()
    now = datetime.now(get_timezone())
    reminders = load_jsons("data/reminders.json")  # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ JSON —Ñ–∞–π–ª–∞

    for reminder in reminders:
        reminder_time = calculate_reminder_time(webinar_time, reminder["time"])
        delay = (reminder_time - now).total_seconds()

        if delay > 0:

            msg = f"‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder['label']} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {reminder_time} (—á–µ—Ä–µ–∑ {delay:.0f} —Å–µ–∫)"
            print(msg)

            await asyncio.sleep(delay)  # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

            users = load_jsons("data/users.json")
            if users is None:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                continue

            user_ids = [user["user_id"] for user in users if "user_id" in user]

            if not user_ids:
                print("üì≠ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                continue

            print(
                f"üì® –†–∞—Å—Å—ã–ª–∫–∞ {reminder['label']} –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
            )

            if reminder["last"] == True:
                print("–°—Å—ã–ª–∫–∞: ", get_webinar_link())
            else:
                print("–ü—É—Å—Ç–æ")

            for user_id in user_ids:
                try:
                    await bot.send_message(
                        chat_id=user_id,
                        text=(
                            reminder["text"] + get_webinar_link()
                            if reminder["last"] == True
                            else ""
                        ),
                        parse_mode="HTML",
                    )
                    print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_id}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {user_id}: {e}")
                await asyncio.sleep(0.05)  # –∞–Ω—Ç–∏-—Å–ø–∞–º

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ —Å–Ω–∞
            now = datetime.now(get_timezone())
            print(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{reminder['label']}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        else:
            print(
                f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{reminder['label']}' –ø—Ä–æ–ø—É—â–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ."
            )


async def start_reminder(bot):
    if "webinar_reminder" in active_tasks:
        print("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ.")
        return
    task = asyncio.create_task(schedule_webinar_reminder(bot))
    active_tasks["webinar_reminder"] = task

    print("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ.")


async def stop_reminder():
    task = active_tasks.get("webinar_reminder")
    if task:
        task.cancel()
        try:
            await task
        except asyncio.CancelledError:
            print("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        del active_tasks["webinar_reminder"]


async def on_startup_reg(dp):  # ‚Üê –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äî dp (–¥–∏—Å–ø–µ—Ç—á–µ—Ä)
    bot = dp.bot  # ‚Üê –ø–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ...")
    await start_reminder(bot)
    # asyncio.create_task(schedule_webinar_reminder(bot))
