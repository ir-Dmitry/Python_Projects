# handlers/common.py
import os
import re
import json
import logging
import asyncio
from aiogram import types
from datetime import datetime
from aiogram.types import ParseMode
from config_loader import ConfigLoader
from aiogram.dispatcher import Dispatcher
from .file_reader import load_jsons
from .common_button import send_keyboard
from .reminder import stop_reminder, start_reminder
from .common_file import (  # Import the functions from file_utils.py
    send_file_section,
    send_sections_list,
    send_commands_list,
    delete_command,
)
from .registration import (
    cmd_reg,
    process_full_name,
    Registration,
    process_email,
    process_simple_reg,
)

logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConfigLoader ---
config_loader = ConfigLoader()


async def send_text_from_description(message: types.Message, description: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è."""
    if description:
        await message.reply(description)
    else:
        await message.reply("–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


async def echo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç—Ö–æ-—Å–æ–æ–±—â–µ–Ω–∏–π."""
    # await message.answer(
    #     "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /start."
    # )  # –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.

    tmp_msg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è"
    await send_keyboard(message, tmp_msg, "registration")


def create_command_handler(command_config: dict):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ command_config."""

    async def handler(message: types.Message):
        await cmd_start(message)
        try:
            if command_config["response_type"] == "text":
                await send_text_from_description(message, command_config["description"])
            elif command_config["response_type"] == "keyboard":
                await send_keyboard(
                    message, command_config["description"], command_config["category"]
                )
            elif (
                command_config["response_type"] == "file_section"
            ):  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–µ–∫—Ü–∏–∏
                section = 1  # Default section

                if "file_section" in command_config:

                    logging.info(
                        f'–ù–∞—à–ª–∏ webinar_ = {int(command_config["file_section"])}'
                    )
                    section = int(command_config["file_section"])
                    # logger.info(f"–ï–°–¢–¨ [file_section] !")
                else:
                    logger.info(f"–ù–µ—Ç—É [file_section]")

                # Extract section number from command text
                match = re.match(r"/sec_(\d+)", message.text)

                # logging.info(match)
                if match:
                    logging.info(f"–ù–∞—à–ª–∏ sec_ = {int(match.group(1))}")

                    section = int(match.group(1))

                parse_mode = command_config.get(
                    "parse_mode",
                    # ParseMode.MARKDOWN_V2
                )  # Default to Markdown if not specified
                await send_file_section(
                    message, command_config["filename"], section, parse_mode
                )
            elif (
                command_config["response_type"] == "file_sections"
            ):  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–µ–∫—Ü–∏–π
                await send_sections_list(message, command_config["filename"])
            elif (
                command_config["response_type"] == "file_commands"
            ):  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–µ–∫—Ü–∏–π
                await send_commands_list(message)
            elif command_config["response_type"] == "":  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–µ–∫—Ü–∏–π
                await send_sections_list(message, command_config["filename"])
            else:
                logger.warning(
                    f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π response_type: {command_config['response_type']}"
                )
                await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞.")
        except KeyError as e:
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∫–ª—é—á –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            await message.reply("–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

    return handler


async def delete_command_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_command."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.  –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤–≤–æ–¥–∏—Ç—Å—è –∫–∞–∫:
        # /delete_command /command_name
        command_name = message.text.split()[1]  # –ü–æ–ª—É—á–∞–µ–º –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç (–∏–º—è –∫–æ–º–∞–Ω–¥—ã)
        print("command_name = " + command_name)
        await delete_command(message, command_name)
    except IndexError:
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.  –ü—Ä–∏–º–µ—Ä: `/delete_command /command_name`",
            parse_mode=ParseMode.MARKDOWN,
        )
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–º–∞–Ω–¥—ã /delete_command: {e}")
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {e}")


async def remove_all_registrations(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove_all_registrations –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    if not await admin_only(message):
        return
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = load_jsons("data/users.json")

        if not users:
            await message.reply("üì≠ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–∂–µ –ø—É—Å—Ç.")
            return

        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users.clear()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
        with open("data/users.json", "w", encoding="utf-8") as f:
            json.dump(users, f, ensure_ascii=False, indent=2)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        await message.reply(
            "‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω."
        )

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–º–∞–Ω–¥—ã /remove_all_registrations: {e}")
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ø–∏—Å–∫–∞: {e}")


async def create_new_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create_command."""
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lines = message.text.split("\n")

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–æ–º–∞–Ω–¥—ã (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–æ –ø–µ—Ä–≤–æ–µ)
        command_name = lines[0].split(" ")[1].strip()

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        command_params = {}

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
        for line in lines[1:]:
            if ":" in line:
                key, value = line.split(":", 1)  # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –ø–µ—Ä–≤–æ–º—É ":"
                key = key.strip()
                value = value.strip()
                command_params[key] = value

        # Load existing commands
        commands = config_loader.load_commands_config()

        # Add the new command
        commands[command_name] = command_params

        # Save the updated commands
        config_loader.save_commands_config(commands)

        await message.reply(
            f"–ö–æ–º–∞–Ω–¥–∞ `{command_name}` —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.", parse_mode=ParseMode.MARKDOWN
        )

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")


async def on_startup_common(dp: Dispatcher):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ö –¥–ª—è polling"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        updates = await dp.bot.get_updates(limit=100, timeout=1)

        if updates:
            user_ids = set()
            for update in updates:
                if update.message:
                    user_ids.add(update.message.from_user.id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            for user_id in user_ids:
                try:
                    await dp.bot.send_message(
                        user_id,
                        "üîß –ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω.\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å.",
                    )
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {user_id}: {e}")
                await asyncio.sleep(0.05)

            print(f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–æ {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ.")

            # ‚Äî‚Äî‚Äî –ö–õ–Æ–ß–ï–í–ê–Ø –°–¢–†–û–ö–ê ‚Äî‚Äî‚Äî
            # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ —ç—Ç–æ–≥–æ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
            last_update_id = updates[-1].update_id
            await dp.bot.get_updates(offset=last_update_id + 1, limit=1, timeout=0)
            # –≠—Ç–æ "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç" –ø—Ä–∏—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ‚Äî Telegram –Ω–µ –ø—Ä–∏—à–ª—ë—Ç –∏—Ö —Å–Ω–æ–≤–∞

        else:
            print("‚úÖ –ù–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ on_startup: {e}")

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")


async def update_webinar_link(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /update_webinar_link –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä."""

    if not await admin_only(message):
        return
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
        new_link = message.get_args().strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if not new_link:
            await message.reply(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É. –ü—Ä–∏–º–µ—Ä: `/update_webinar_link https://example.com/webinar`"
            )
            return

        # –ó–∞–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ —Ñ–∞–π–ª–µ .env
        with open(".env", "r", encoding="utf-8") as file:
            lines = file.readlines()

        with open(".env", "w", encoding="utf-8") as file:
            found = False
            for line in lines:
                if line.startswith("WEBINAR_LINK="):
                    file.write(f'WEBINAR_LINK="{new_link}"\n')
                    found = True
                else:
                    file.write(line)
            if not found:
                file.write(f'WEBINAR_LINK="{new_link}"\n')  # –î–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ["WEBINAR_LINK"] = new_link

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await stop_reminder()
        await start_reminder(message.bot)

        await message.reply(
            f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n{new_link}",
            parse_mode=ParseMode.MARKDOWN,
        )

    except Exception as e:
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")


async def update_webinar_datetime(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /update_webinar_datetime –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤–µ–±–∏–Ω–∞—Ä–∞."""

    if not await admin_only(message):
        return
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
        new_datetime_str = message.get_args().strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if not new_datetime_str:
            await message.reply(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD HH:MM:SS'. –ü—Ä–∏–º–µ—Ä: `/update_webinar_datetime 2025-08-06 12:00:00`"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        try:
            new_webinar_datetime = datetime.strptime(
                new_datetime_str, "%Y-%m-%d %H:%M:%S"
            )
        except ValueError:
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç 'YYYY-MM-DD HH:MM:SS'."
            )
            return

        # –ó–∞–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ —Ñ–∞–π–ª–µ .env
        with open(".env", "r") as file:
            lines = file.readlines()

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
        with open(".env", "w") as file:
            for line in lines:
                if line.startswith("WEBINAR_DATETIME="):
                    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–µ
                    file.write(
                        f"""WEBINAR_DATETIME="{new_webinar_datetime.strftime('%Y-%m-%d %H:%M:%S')}"\n"""
                    )
                else:
                    file.write(line)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ["WEBINAR_DATETIME"] = new_webinar_datetime.strftime(
            "%Y-%m-%d %H:%M:%S"
        )
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await stop_reminder()
        await start_reminder(message.bot)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await message.reply(
            f"‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤–µ–±–∏–Ω–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞: {new_webinar_datetime.strftime('%Y-%m-%d %H:%M:%S')}",
            parse_mode=ParseMode.MARKDOWN,
        )

    except Exception as e:
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")


async def stop_reminder_command(message: types.Message):
    if not await admin_only(message):
        return
    await stop_reminder()
    await message.reply("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")


ALL_USERS_FILE = "data/all_users.json"
ADMINS_FILE = "data/admins.json"


# –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
def init_users_file():
    if not os.path.exists(ALL_USERS_FILE):
        with open(ALL_USERS_FILE, "w", encoding="utf-8") as f:
            json.dump([], f, ensure_ascii=False, indent=4)


# –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_all_users():
    try:
        with open(ALL_USERS_FILE, "r", encoding="utf-8") as f:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            data = f.read().strip()
            if not data:
                return []
            return json.loads(data)
    # –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    except json.JSONDecodeError:
        return []
    except FileNotFoundError:
        return []


# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª (–µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç)
def add_user(user_id: int, username: str):
    users = load_all_users()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ ID
    if not any(user["id"] == user_id for user in users):
        users.append({"id": user_id, "username": username, "admin": False})
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        with open(ALL_USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(users, f, ensure_ascii=False, indent=4)
        return True
    return False


# –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∏–∑–º–µ–Ω—è–µ–º –ø–æ–ª–µ "admin" –Ω–∞ True)
def add_admin(user_id: int):
    users = load_all_users()
    for user in users:
        if user["id"] == user_id:
            if not user["admin"]:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∞–¥–º–∏–Ω
                user["admin"] = True
                # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                with open(ALL_USERS_FILE, "w", encoding="utf-8") as f:
                    json.dump(users, f, ensure_ascii=False, indent=4)
                return True
    return False


# –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∏–∑–º–µ–Ω—è–µ–º –ø–æ–ª–µ "admin" –Ω–∞ False)
def remove_admin(user_id: int):
    users = load_all_users()
    for user in users:
        if user["id"] == user_id:
            if user["admin"]:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
                user["admin"] = False
                # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                with open(ALL_USERS_FILE, "w", encoding="utf-8") as f:
                    json.dump(users, f, ensure_ascii=False, indent=4)
                return True
    return False


# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id: int):
    users = load_all_users()
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    user = next((user for user in users if user["id"] == user_id), None)
    return user and user.get("admin", False)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
async def admin_only(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return False
    return True


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
async def cmd_start(message: types.Message):
    user = message.from_user
    user_id = user.id
    username = user.username  # –±–µ–∑ @

    print(f"User: ID={user_id}, Username=@{username}")

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª all_users.json
    added = add_user(user_id, username)
    if added:
        print(f"‚úÖ –ü—Ä–∏–≤–µ—Ç! –¢–≤–æ–π ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {user_id}")
    else:
        print(f"‚úÖ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –¢—ã —É–∂–µ –≤ –±–∞–∑–µ: {user_id}")


async def remove_admin_by_nickname(message: types.Message):
    if not await admin_only(message):
        return  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        nickname = message.text.split()[1]  # @username
        print(f"–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞: /remove_admin —Å –Ω–∏–∫–Ω–µ–π–º–æ–º @{nickname}")

        # –£–±–∏—Ä–∞–µ–º @, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if nickname.startswith("@"):
            nickname = nickname[1:]
        print(f"–ù–∏–∫–Ω–µ–π–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è @: {nickname}")

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫–Ω–µ–π–º—É –≤ –±–∞–∑–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = load_all_users()
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã.")
        user_info = next((user for user in users if user["username"] == nickname), None)

        if user_info:
            user_id = user_info["id"]
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{nickname} –Ω–∞–π–¥–µ–Ω —Å ID: {user_id}")

            # –£–¥–∞–ª—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            removed = remove_admin(user_id)
            if removed:
                await message.answer(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{nickname} —É–¥–∞–ª–µ–Ω.")
            else:
                await message.answer(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{nickname} –Ω–µ –±—ã–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
        else:
            await message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∏–∫–Ω–µ–π–º–æ–º @{nickname}."
            )

    except IndexError:
        await message.answer(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: /remove_admin @username"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: {str(e)}")


async def add_admin_by_nickname(message: types.Message):
    if not await admin_only(message):
        return
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        nickname = message.text.split()[1]  # @username
        print(f"–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞: /add_admin —Å –Ω–∏–∫–Ω–µ–π–º–æ–º @{nickname}")

        # –£–±–∏—Ä–∞–µ–º @, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if nickname.startswith("@"):
            nickname = nickname[1:]
        print(f"–ù–∏–∫–Ω–µ–π–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è @: {nickname}")

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫–Ω–µ–π–º—É –≤ –±–∞–∑–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = load_all_users()
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã.")
        user_info = next((user for user in users if user["username"] == nickname), None)

        if user_info:
            user_id = user_info["id"]
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{nickname} –Ω–∞–π–¥–µ–Ω —Å ID: {user_id}")
            # –î–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            added = add_admin(user_id)
            if added:
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{nickname} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã.")
                await message.answer(f"‚úÖ –ê–¥–º–∏–Ω @{nickname} –¥–æ–±–∞–≤–ª–µ–Ω.")
            else:
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{nickname} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                await message.answer(
                    f"‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
        else:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{nickname} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            await message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∏–∫–Ω–µ–π–º–æ–º @{nickname}."
            )

    except IndexError:
        print("–û—à–∏–±–∫–∞: –ù–∏–∫–Ω–µ–π–º –Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω –≤ –∫–æ–º–∞–Ω–¥–µ.")
        await message.answer(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: /add_admin @username"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: {str(e)}")


def register_common_handler(dp: Dispatcher):
    init_users_file()  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    commands = config_loader.load_commands_config()

    for command_name, command_config in commands.items():
        handler = create_command_handler(command_config)

        dp.register_message_handler(handler, commands=[command_name])

    for command_name, command_config in commands.items():
        if command_name == "sec_":
            # Register the handler with a regular expression to match /sec_<number>
            dp.register_message_handler(
                create_command_handler(command_config), regexp_commands=[f"sec_(\d+)"]
            )
    """
    –≠—Ç–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –§–ò–û –∏ email.
    
    # dp.register_message_handler(cmd_reg, commands=["reg"])
    # dp.register_message_handler(
    #     process_full_name, state=Registration.waiting_for_full_name
    # )
    # dp.register_message_handler(process_email, state=Registration.waiting_for_email)
    
    """
    dp.register_message_handler(process_simple_reg, commands=["reg"])

    # /////////////////////////////////
    dp.register_message_handler(add_admin_by_nickname, commands=["add_admin"])
    dp.register_message_handler(remove_admin_by_nickname, commands=["remove_admin"])
    dp.register_message_handler(
        remove_all_registrations, commands=["remove_all_registrations"]
    )
    dp.register_message_handler(
        update_webinar_datetime, commands=["update_webinar_datetime"]
    )
    dp.register_message_handler(update_webinar_link, commands=["update_webinar_link"])
    dp.register_message_handler(stop_reminder_command, commands=["stop_reminder"])
    # ////////////////////////////////////////

    dp.register_message_handler(create_new_command, commands=["create_command"])
    dp.register_message_handler(delete_command_handler, commands=["delete_command"])
    dp.register_message_handler(echo)
