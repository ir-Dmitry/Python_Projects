import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.types import ParseMode
from aiogram.utils import executor
import asyncio
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo  # —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å Python 3.9+
import os
from dotenv import load_dotenv
import logging
import json
from typing import List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

moscow_time = datetime.now(ZoneInfo("Europe/Moscow"))
print(f"–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: {moscow_time}")


TOKEN = BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBINAR_DATETIME = os.getenv("WEBINAR_DATETIME")
TIMEZONE = os.getenv("TIMEZONE")

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)

# ///////////////////////////–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏///////////////////////////
import json
import re
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# –í–∫–ª—é—á–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–≤ –ø–∞–º—è—Ç–∏)
storage = MemoryStorage()


# ‚Äî‚Äî‚Äî FSM: —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî‚Äî‚Äî
class Registration(StatesGroup):
    waiting_for_full_name = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ: –∂–¥—ë–º –§–ò–û
    waiting_for_email = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ: –∂–¥—ë–º email


async def cmd_reg(message: types.Message):
    await message.answer("üìù –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await Registration.waiting_for_full_name.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


async def process_full_name(message: types.Message, state: FSMContext):
    full_name = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(full_name) < 2 or len(full_name) > 100:
        await message.answer("‚ùå –§–ò–û –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ –±–æ–ª—å—à–µ 100.")
        return

    # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ: –±—É–∫–≤—ã (—Ä—É—Å/–∞–Ω–≥–ª), –ø—Ä–æ–±–µ–ª, –¥–µ—Ñ–∏—Å, –∞–ø–æ—Å—Ç—Ä–æ—Ñ
    if not re.fullmatch(r"[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-']+", full_name):
        await message.answer(
            "‚ùå –§–ò–û –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ:\n"
            "‚Ä¢ –ë—É–∫–≤—ã (—Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ)\n"
            "‚Ä¢ –ü—Ä–æ–±–µ–ª\n"
            "‚Ä¢ –î–µ—Ñ–∏—Å (-)\n"
            "‚Ä¢ –ê–ø–æ—Å—Ç—Ä–æ—Ñ (')"
        )
        return

    # ‚úÖ –í—Å—ë –æ–∫ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    await state.update_data(full_name=full_name)
    await message.answer("üìß –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    await Registration.waiting_for_email.set()


def is_valid_email(email: str) -> bool:
    pattern = r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"
    return re.match(pattern, email) is not None


async def process_email(message: types.Message, state: FSMContext):
    email = message.text.strip()

    if not is_valid_email(email):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email
    await state.update_data(email=email)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    full_name = data["full_name"]
    user_id = message.from_user.id

    # üíæ –ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–π –≤ JSON, –ë–î –∏ —Ç.–ø.
    success = save_registration(user_id, full_name, email)

    await message.answer(success, parse_mode="HTML")

    # üßπ –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.finish()


def save_registration(user_id: int, full_name: str, email: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    try:
        with open("users.json", "r", encoding="utf-8") as f:
            content = f.read().strip()
            if not content:
                users = []  # –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª ‚Üí —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ []
            else:
                users = json.loads(content)  # –ø–∞—Ä—Å–∏–º JSON
    except FileNotFoundError:
        users = []
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
    if any(user["user_id"] == user_id for user in users):
        return (
            "‚ö†Ô∏è <b>–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã</b> –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä.\n\n"
            "–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –≤–æ–≤—Ä–µ–º—è!"
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users.append(
        {
            "user_id": user_id,
            "full_name": full_name,
            "email": email,
            "registered_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        }
    )

    try:
        with open("users.json", "w", encoding="utf-8") as f:
            json.dump(users, f, ensure_ascii=False, indent=2)
        return (
            "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üìå –§–ò–û: {full_name}\n"
            f"‚úâÔ∏è Email: {email}\n\n"
            "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–µ–±–∏–Ω–∞—Ä–µ –ø—Ä–∏–¥–µ—Ç –≤–æ–≤—Ä–µ–º—è."
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: {e}")
        return (
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )


# ///////////////////////////–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏///////////////////////////


def get_webinar_time():

    dt_str = WEBINAR_DATETIME
    tz_name = TIMEZONE

    naive_dt = datetime.strptime(dt_str, "%Y-%m-%d %H:%M:%S")
    aware_dt = naive_dt.replace(tzinfo=ZoneInfo(tz_name))

    return aware_dt


def load_user_ids_from_json(filename: str = "users.json") -> List[int]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ user_id –∏–∑ JSON-—Ñ–∞–π–ª–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞.
    """
    try:
        with open(filename, "r", encoding="utf-8") as f:
            data = json.load(f)
        return [user["user_id"] for user in data if "user_id" in user]
    except FileNotFoundError:
        print(f"‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {filename}: {e}")
        return []


async def schedule_webinar_reminder(bot: Bot):
    """
    –ñ–¥—ë—Ç –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–µ–±–∏–Ω–∞—Ä–∞ –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –í–°–ï–ú –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.
    user_id –±–µ—Ä—ë—Ç—Å—è –∏–∑ users.json.
    """
    webinar_time = get_webinar_time()

    first_message = webinar_time - timedelta(minutes=1440)
    second_message = webinar_time - timedelta(minutes=120)
    last_message = webinar_time - timedelta(minutes=10)

    now = datetime.now(ZoneInfo(TIMEZONE))

    if webinar_time <= now:
        print("‚ö†Ô∏è –í–µ–±–∏–Ω–∞—Ä —É–∂–µ –ø—Ä–æ—à—ë–ª. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        return

    delay = (webinar_time - now).total_seconds()
    print(f"‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ {delay:.0f} —Å–µ–∫—É–Ω–¥ ({webinar_time})")

    # –ñ–¥—ë–º
    await asyncio.sleep(delay)

    # –ü–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏ ‚Äî —á–∏—Ç–∞–µ–º user_id –∏–∑ —Ñ–∞–π–ª–∞
    user_ids = load_user_ids_from_json()

    if not user_ids:
        print("üì≠ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    print(f"üì® –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")

    # –†–∞—Å—Å—ã–ª–∫–∞
    for user_id in user_ids:
        try:
            await bot.send_message(
                chat_id=user_id,
                text="üîî –í–µ–±–∏–Ω–∞—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –°–ï–ô–ß–ê–°! –ê–≠–ê–≠–ê–≠–ê! –ë—ã—Å—Ç—Ä–æ –±–ª—è—Ç—å!!!\n\n"
                "üëâ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å: https://example.com/webinar",
                parse_mode="HTML",
            )
            print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_id}")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {user_id}: {e}")
        await asyncio.sleep(0.05)  # –∞–Ω—Ç–∏-—Å–ø–∞–º –∑–∞–¥–µ—Ä–∂–∫–∞


async def on_startup_reg(dp):  # ‚Üê –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äî dp (–¥–∏—Å–ø–µ—Ç—á–µ—Ä)
    bot = dp.bot  # ‚Üê –ø–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ...")
    asyncio.create_task(schedule_webinar_reminder(bot))


if __name__ == "__main__":

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞—ë–º on_startup
    executor.start_polling(
        dp,  # –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        on_startup=on_startup_reg,  # —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        skip_updates=True,  # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    )
