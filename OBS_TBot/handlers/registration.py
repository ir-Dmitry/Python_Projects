# handlers/registration.py
import re
import os
import json
import logging
from typing import Union  # ‚Üê –¥–æ–±–∞–≤—å —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
from aiogram import types
from datetime import datetime
from zoneinfo import ZoneInfo  # —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å Python 3.9+
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from .google_sheets import send_data_to_google_sheets
from .file_reader import load_jsons, get_webinar_time

# –õ–æ–≥–∏
os.makedirs("logs", exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
    handlers=[
        logging.FileHandler("logs/registration.log", encoding="utf-8"),
        logging.StreamHandler(),
    ],
)
logger = logging.getLogger(__name__)

moscow_time = datetime.now(ZoneInfo("Europe/Moscow"))
print(f"–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: {moscow_time}")

ERROR_MESSAGES = {
    "timeout": "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É (—Ç–∞–π–º–∞—É—Ç).",
    "connection_error": "‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–µ.",
    "api_error": "‚ö†Ô∏è –û—à–∏–±–∫–∞ Google API.",
    "unknown_error": "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É.",
}


def format_registration_message(tmp_time, gs_result="success") -> str:
    msg = (
        "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üóì –î–∞—Ç–∞ –≤–µ–±–∏–Ω–∞—Ä–∞: {tmp_time.date()}.\n"
        f"üï∞ –í—Ä–µ–º—è: {tmp_time.strftime('%H:%M')}.\n"
        "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–µ–±–∏–Ω–∞—Ä–µ –ø—Ä–∏–¥–µ—Ç –≤–æ–≤—Ä–µ–º—è."
    )
    if gs_result != "success":
        msg += "\n\n" + ERROR_MESSAGES.get(gs_result, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")
    return msg


def load_users(path="data/users.json") -> list:
    if not os.path.exists(path):
        with open(path, "w", encoding="utf-8") as f:
            json.dump([], f, ensure_ascii=False, indent=2)
    return load_jsons(path)


def save_users(users: list, path="data/users.json"):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)


def add_user(user_id: int, path="data/users.json") -> dict:
    users = load_users(path)
    if any(u["user_id"] == user_id for u in users):
        return None  # —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    user = {
        "user_id": user_id,
        "registered_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "available": True,
    }
    users.append(user)
    save_users(users, path)
    return user


async def process_simple_reg(obj: Union[types.Message, types.CallbackQuery]):
    user_id = obj.from_user.id
    logger.info(f"process_simple_reg: ID={user_id}, Username=@{obj.from_user.username}")

    response = save_registration_without_full_name(user_id)

    target = obj.message if isinstance(obj, types.CallbackQuery) else obj
    if isinstance(obj, types.CallbackQuery):
        await obj.answer()
    await target.answer(response, parse_mode="HTML")


def save_registration_without_full_name(user_id: int) -> str:
    try:
        user = add_user(user_id)
        if user is None:
            return (
                "‚ö†Ô∏è <b>–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã</b> –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä.\n\n"
                "–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –≤–æ–≤—Ä–µ–º—è!"
            )

        tmp_time = get_webinar_time()
        gs_result = send_data_to_google_sheets(user)
        return format_registration_message(tmp_time, gs_result)

    except (AttributeError, OSError, json.JSONDecodeError) as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True
        )
        return (
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )
    except Exception as e:
        logger.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )
