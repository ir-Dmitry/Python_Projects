# handlers/registration.py
import re
import os
import json
import logging
from typing import Union  # ‚Üê –¥–æ–±–∞–≤—å —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
from aiogram import types
from datetime import datetime
from zoneinfo import ZoneInfo  # —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å Python 3.9+
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from .google_sheets import send_to_google_sheets
from .file_reader import load_jsons, get_webinar_time

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
os.makedirs("logs", exist_ok=True)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logging.basicConfig(
    level=logging.INFO,  # –£—Ä–æ–≤–µ–Ω—å: INFO –∏ –≤—ã—à–µ (INFO, WARNING, ERROR, CRITICAL)
    format="%(asctime)s | %(levelname)s | %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
    handlers=[
        logging.FileHandler("logs/registration.log", encoding="utf-8"),
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    ],
)
logger = logging.getLogger(__name__)

moscow_time = datetime.now(ZoneInfo("Europe/Moscow"))
print(f"–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: {moscow_time}")

# –í–∫–ª—é—á–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–≤ –ø–∞–º—è—Ç–∏)
storage = MemoryStorage()

# –≥–¥–µ-—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–æ

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
NAME_PATTERN = r"[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-']+"
EMAIL_PATTERN = r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"


# ‚Äî‚Äî‚Äî FSM: —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî‚Äî‚Äî
class Registration(StatesGroup):
    waiting_for_full_name = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ: –∂–¥—ë–º –§–ò–û
    waiting_for_email = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ: –∂–¥—ë–º email


async def cmd_reg(message: types.Message):
    await message.answer("üìù –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

    await Registration.waiting_for_full_name.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


async def process_full_name(message: types.Message, state: FSMContext):
    full_name = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(full_name) < 2 or len(full_name) > 100:
        await message.answer("‚ùå –§–ò–û –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ –±–æ–ª—å—à–µ 100.")
        return

    # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ: –±—É–∫–≤—ã (—Ä—É—Å/–∞–Ω–≥–ª), –ø—Ä–æ–±–µ–ª, –¥–µ—Ñ–∏—Å, –∞–ø–æ—Å—Ç—Ä–æ—Ñ
    if not re.fullmatch(NAME_PATTERN, full_name):
        await message.answer(
            "‚ùå –§–ò–û –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ:\n"
            "‚Ä¢ –ë—É–∫–≤—ã (—Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ)\n"
            "‚Ä¢ –ü—Ä–æ–±–µ–ª\n"
            "‚Ä¢ –î–µ—Ñ–∏—Å (-)\n"
            "‚Ä¢ –ê–ø–æ—Å—Ç—Ä–æ—Ñ (')"
        )
        return

    # ‚úÖ –í—Å—ë –æ–∫ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    await state.update_data(full_name=full_name)
    await message.answer("üìß –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    await Registration.waiting_for_email.set()


def is_valid_email(email: str) -> bool:
    pattern = EMAIL_PATTERN
    return re.match(pattern, email) is not None


async def process_email(message: types.Message, state: FSMContext):
    email = message.text.strip()

    if not is_valid_email(email):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email
    await state.update_data(email=email)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    full_name = data["full_name"]
    user_id = message.from_user.id

    # üíæ –ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–π –≤ JSON, –ë–î –∏ —Ç.–ø.
    success = save_registration(user_id, full_name, email)

    await message.answer(success, parse_mode="HTML")

    # üßπ –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.finish()


def save_registration(user_id: int, full_name: str, email: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    users = load_jsons("data/users.json")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
    if any(user["user_id"] == user_id for user in users):
        return (
            "‚ö†Ô∏è <b>–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã</b> –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä.\n\n"
            "–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –≤–æ–≤—Ä–µ–º—è!"
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pers = {
        "user_id": user_id,
        "full_name": full_name,
        "email": email,
        "registered_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
    }
    users.append(pers)

    # üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google –¢–∞–±–ª–∏—Ü—É
    send_to_google_sheets(pers)

    try:
        tmp_time = get_webinar_time()
        with open("data/users.json", "w", encoding="utf-8") as f:
            json.dump(users, f, ensure_ascii=False, indent=2)
        return (
            "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üìå –§–ò–û: {full_name}\n"
            f"‚úâÔ∏è Email: {email}\n\n"
            f"üóì –î–∞—Ç–∞ –≤–µ–±–∏–Ω–∞—Ä–∞: {tmp_time.date()}. \nüï∞ –í—Ä–µ–º—è: {tmp_time.strftime('%H:%M')}.\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–µ–±–∏–Ω–∞—Ä–µ –ø—Ä–∏–¥–µ—Ç –≤–æ–≤—Ä–µ–º—è."
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: {e}")
        return (
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )


"""
    /////////////////////////////////////////////////////////////////////////////////////
    –ù–∞—á–∞–ª–æ –±–µ–∑ –§–ò–û –∏ email
"""


async def process_simple_reg(obj: Union[types.Message, types.CallbackQuery]):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –≤ –æ–±–æ–∏—Ö —Å–ª—É—á–∞—è—Ö –ø–æ–ª–µ .from_user
    user = obj.from_user
    user_id = user.id

    print(f"[DEBUG] process_simple_reg: ID={user_id}, Username=@{user.username}")

    success = save_registration_without_full_name(user_id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –æ—Ç–≤–µ—á–∞—Ç—å
    if isinstance(obj, types.CallbackQuery):
        await obj.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
        target_message = obj.message
    else:  # Message
        target_message = obj

    await target_message.answer(success, parse_mode="HTML")


def save_registration_without_full_name(user_id: int):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    path_users = "data/users.json"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if not os.path.exists(path_users):
        with open(path_users, "w", encoding="utf-8") as f:
            json.dump([], f, ensure_ascii=False, indent=2)

    users = load_jsons(path_users)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
    if any(user["user_id"] == user_id for user in users):
        return (
            "‚ö†Ô∏è <b>–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã</b> –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä.\n\n"
            "–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –≤–æ–≤—Ä–µ–º—è!"
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pers = {
        "user_id": user_id,
        "registered_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "is_blocked": False,
    }

    try:
        users.append(pers)
        tmp_time = get_webinar_time()
        with open("data/users.json", "w", encoding="utf-8") as f:
            json.dump(users, f, ensure_ascii=False, indent=2)

        # üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google –¢–∞–±–ª–∏—Ü—É
        send_to_google_sheets(pers)

        return (
            "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üóì –î–∞—Ç–∞ –≤–µ–±–∏–Ω–∞—Ä–∞: {tmp_time.date()}. \nüï∞ –í—Ä–µ–º—è: {tmp_time.strftime('%H:%M')}.\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–µ–±–∏–Ω–∞—Ä–µ –ø—Ä–∏–¥–µ—Ç –≤–æ–≤—Ä–µ–º—è."
        )
    except AttributeError:
        logger.error(
            "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è 'users' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ append"
        )
        return (
            "‚ùå –û—à–∏–±–∫–∞: –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )

    except OSError as e:
        logger.error(f"–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–æ–º: {e}")
        return (
            "‚ùå –û—à–∏–±–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )

    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ JSON –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏/–∑–∞–ø–∏—Å–∏: {e}")
        return (
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )

    except TimeoutError:
        logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google Sheets")
        return (
            "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )

    except ConnectionError:
        logger.error(
            "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets (–Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
        )
        return (
            "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ.\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Google –¢–∞–±–ª–∏—Ü—É ‚Äî –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )

    except Exception as e:
        # –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        return (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )
